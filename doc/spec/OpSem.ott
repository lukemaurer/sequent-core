
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Dynamic semantics  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% The definitions in this file do *not* strictly correspond to any specific
% code in GHC. They are here to provide a reasonable operational semantic
% interpretation to the typing rules presented in the other ott files. Thus,
% your mileage may vary. In particular, there has been *no* attempt to
% write any formal proofs over these semantics.
%
% With that disclaimer disclaimed, these rules are a reasonable jumping-off
% point for an analysis of FC's operational semantics. If you don't want to
% worry about mutual recursion (and who does?), you can even drop the
% environment S.

grammar

defns
OpSem :: '' ::=

defn S |- c --> c'  ::  :: step :: 'c_' {{ com Single step semantics }}
{{ tex [[S]] \labeledjudge{op} [[c]] [[-->]] [[c']] }}
by

S(n) = v
----------------- :: Var
S |- < n | e > --> < v | e >

----------------------------- :: Beta
S |- < \ n . v | applyTo v' ; e > --> <v [ n |-> v' ] | e >

g0 = sym (nth 0 g)
g1 = nth 1 g
not v2 is_a_type
not v2 is_a_coercion
t -> s = coercionKind g0
----------------------------------------------- :: Push
S |- < v | |> g ; applyTo v2; e > --> < v | applyTo compute kappa_s . < v2 | |> g0 ; ret kappa_s > ; |> g1 ; e >

---------------------------------------- :: TPush
S |- < v | |> g; applyTo t; e > --> < v | applyTo t; |> g t; e >

g0 = nth 1 (nth 0 g)
g1 = sym (nth 2 (nth 0 g))
g2 = nth 1 g
------------------------------- :: CPush
S |- < v | |> g; applyTo g'; e > --> < v | applyTo (g0 ;; g' ;; g1); |> g2; e >

------------------------------------------------------------ :: LetNonRec
S |- let n = w in c --> c [n |-> w]


S, </ [ ni |-> vi ] // i /> |- c --> c'
--------------------------------------- :: LetRec
S |- let rec </ ni = vi // i /> in c --> let rec </ ni = vi // i /> in c'

fv(c) \inter </ ni // i /> = empty
------------------------------------------ :: LetRecReturn
S |- let rec </ ni = vi // i /> in c --> c

altbb = K </ alphaj_kj // j /> </ xkk_tkk // kk /> -> c
subst = [n |-> v] </ [ alphaj_kj |-> sj ] // j /> </ [xkk_tkk |-> vkk] // kk />
------------ :: MatchData
S |- < K | applyToAll </ t'i // i /> </ sj // j /> </ vkk // kk /> ; case as n of </ altaa // aa /> > --> c subst

altj = lit -> c
---------------------------------------------------------------- :: MatchLit
S |- < lit | case as n of </ alti // i /> > --> c[n |-> lit]

altj = _ -> c
no other case matches
------------------------------------------------------------ :: MatchDefault
S |- < v | case as n of </ alti // i /> > --> c [n |-> v]

T </ taa // aa /> ~#k T </ t'aa // aa /> = coercionKind g
forall </ alphaaa_kaa // aa />. forall </ betabb_k'bb // bb />. </ t1cc // cc /> @-> T </ alphaaa_kaa // aa /> = dataConRepType K
</ v'cc = compute ncc . < vcc | |> (t1cc @ </ [alphaaa_kaa |-> nth aa g] // aa /> </ [betabb_k'bb |-> <sbb>_Nom] // bb />); ret ncc > // cc /> 
--------------------------- :: CasePush
S |- < K | applyToAll </ taa // aa /> </ sbb // bb /> </ vcc // cc /> ; |> g; case as n of </ alti // i /> > --> < K | applyToAll </ t'aa // aa /> </ sbb // bb /> </ v'cc // cc /> ; case as n of </ alti // i /> >
